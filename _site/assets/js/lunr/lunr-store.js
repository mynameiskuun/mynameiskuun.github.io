var store = [{
        "title": "Post: SQL 문제 풀이 - SELECT",
        "excerpt":"프로그래머스 SQL 코딩테스트 연습   서울에 위치한 식당 목록 출력하기     REST_INFO와 REST_REVIEW 테이블에서 서울에 위치한 식당들의 식당 ID, 식당 이름, 음식 종류, 즐겨찾기수, 주소, 리뷰 평균 점수를 조회하는 SQL문을 작성해주세요. 이때 리뷰 평균점수는 소수점 세 번째 자리에서 반올림 해주시고 결과는 평균점수를 기준으로 내림차순 정렬해주시고, 평균점수가 같다면 즐겨찾기수를 기준으로 내림차순 정렬해주세요.           문제 해결 중 학습한 내용          GROUP BY            GROUP BY는 주로 COUNT(), MAX(), MIN(), SUM(), AVG() 등의 집계 함수와 같이 사용된다.  GROUP BY 사용 시 SELECT 되는 모든 열은 반드시 집계 함수가 사용되거나, GROUP BY의 대상이어야 한다.   연산 순서는 SELECT - FROM - JOIN - WHERE - GROUP BY - HAVING 이며,  WHERE 절은 그룹핑 되기 전 칼럼에 대한 필터링, HAVING은 그룹핑 완료 후 결과셋의 필터링을 처리한다.            와일드카드            데이터 값에 특정 문자열이 포함된 레코드를 찾기 위해, 와일드 카드를 사용할 수 있으며, 이때 반드시 LIKE 연산자를 사용해야 한다. 하지만 와일드 카드 검색은 대체로 다른 검색보다 시간이 오래걸린다. 와일드카드로 시작하는 검색 패턴은 처리가 가장 느리다.            ON, WHERE의 차이점            두가지 모두 JOIN을 위한 조건절로 사용되지만, ON은 JOIN이 이루어 지기 전 필터링, WHERE는 JOIN 이후 필터링이 처리되는 차이가 있다.                    정답       SELECT     i.REST_ID,     i.REST_NAME,     i.FOOD_TYPE,     i.FAVORITES,     i.ADDRESS,     ROUND(AVG(r.REVIEW_SCORE), 2) as SCORE FROM     rest_info i JOIN     rest_review r ON     i.REST_ID = r.REST_ID WHERE     i.ADDRESS LIKE '서울%' GROUP BY     i.REST_NAME ORDER BY     SCORE DESC,     FAVORITES DESC           오답 포인트          JOIN이 아닌 LEFT JOIN 사용            LEFT JOIN 사용 시 리뷰가 한건도 작성되지 않은 식당 정보도 포함됨.          ","categories": ["coding-test"],
        "tags": ["SQL"],
        "url": "/coding-test/SQL-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4(1)/",
        "teaser": null
      },{
        "title": "Post: SQL 문제 풀이 - SELECT",
        "excerpt":"프로그래머스 SQL 코딩테스트 연습   오프라인/온라인 판매 데이터 통합하기     ONLINE_SALE 테이블과 OFFLINE_SALE 테이블에서 2022년 3월의 오프라인/온라인 상품 판매 데이터의 판매 날짜, 상품ID, 유저ID, 판매량을 출력하는 SQL문을 작성해주세요. OFFLINE_SALE 테이블의 판매 데이터의 USER_ID 값은 NULL 로 표시해주세요. 결과는 판매일을 기준으로 오름차순 정렬해주시고 판매일이 같다면 상품 ID를 기준으로 오름차순, 상품ID까지 같다면 유저 ID를 기준으로 오름차순 정렬해주세요.           어려웠던 부분                      어떻게 두 테이블의 결과를 하나로 묶어서 반환할 것인가?          테이블을 묶는 과정에서, OFFLINE_SALE 테이블에 없는 USER_ID 값을 어떻게 NULL로 표현할 것인가?                       문제 해결 중 학습한 내용       1. Union / Union All      두개 이상의 SELECT 결과를 하나로 합쳐서 표현해야 할 때 사용된다.   출력하고자 하는 열의 갯수와 자료형이 서로 일치해야 한다.   이 과정에서 UNION은 중복되는 레코드를 모두 제거한다. 하지만 UNION ALL은 별도의 중복 제거 과정을 거치지 않는다. 이 때문에, 중복 제거 과정을 거치지 않는 UNION ALL이 1.5배 ~ 4배 가량의 성능 차이로 빠르게 처리된다.          사실 둘다 좋은 SQL 작성은 아니다. 나뉜 두가지의 테이블을 하나로 합쳐야 하는 경우가 있다면, 애초부터 분리 운영되야 할 이유가 없는 경우가 더 많다.        UNION을 사용하게 될 경우, 가급적 최소 칼럼만을 사용하고, UNION ALL을 사용하는것이 좋다.    2. 컬럼에 NULL 넣기      주로 UNION을 사용해서 서로다른 테이블 혹은 SELECT 문을 하나로 합칠때, 컬럼의 데이터 종류가 맞지 않거나 컬럼의 갯수를 맞추기 위하여 주로 사용하곤 한다. 위 SQL 문제에서는, 두 테이블을 UNION을 사용하여 합쳐야 했으나, OFFLINE_SALE 테이블에는 없는 USER_ID 컬럼도 포함해서 UNION을 해야 했기 때문에, OFFLINE_SALE 테이블의 USER_ID에 한해서 임의로 NULL을 넣어야 했다.          방법은? 그냥 SELECT NULL 하면 진짜로 NULL이 찍힌다.       3. WHERE 1=1 (번외)      WHERE 1=1 ? 말 그대로 ‘참’ 을 의미한다. 굳이 없어도 될듯 한데 사용하는 이유는?       1. 쿼리 디버깅 시, 주석 처리가 편하다.          SELECT *   FROM CUSTOMERS   WHERE 1=1   (1) AND IDX = #IDX   (2) AND CUSTOMER_ID LIKE ‘L%”;          쿼리 디버깅 시, (1), (2)의 주석처리 및 별도 테스트가 용이하다.         2. 동적 쿼리에서 다른 조건절을 추가하기 용이하다.          동적 쿼리에서는, 특정 조건에 따라 WHERE 구문의 AND 절이 통으로 추가되거나 삭제되곤 한다. 이 때, WHERE절 첫 시작부분 부터 동적으로 제외될 수 있다면 이후 조건절을 작성하기가 매우 까다로워 지기 때문에, WHERE 1=1 등 무조건 참인 조건절을 시작부분에 추가한다. 이 덕분에, 이후의 AND 조건절들은 생성여부에 상관없이 문법 오류를 일으키지 않는다.        myBatis를 사용한다면, 다음과 같은 형식으로 WHERE 1=1을 사용하지 않고도 편리하게 동적 쿼리를 작성할 수 있다.     &lt;where&gt;   &lt;if test=\"state != null\"&gt;      state = #{state}   &lt;/if&gt;   &lt;if test=\"title != null\"&gt;      AND title like #{title}   &lt;/if&gt;   &lt;if test=\"author != null and author.name != null\"&gt;      AND author_name like #{author.name}   &lt;/if&gt; &lt;/where&gt;       이 where절 안에서는, where절 시작이 AND 혹은 OR로 시작되면 자동으로 이를 생략 해 주는 기능이 있다.                 주의할 점             WHERE 1=1 사용으로 발생할 수 있는 문제점은 크게 다음과 같다.            실행 계획 수립이 늦어질 수 있다.                조건절에 따라 적절한 인덱스를 선택하는 것과 같은 최적화 작업을 수행하는 데이터베이스 엔진에게 혼동을 줄 수 있다.                  쿼리의 결과가 변경되지 않기 때문에, 쿼리 결과가 캐시에 저장 될 때, 다른 쿼리 결과와 구분이 어려워져 캐시 성능이 저하될 수 있다.            따라서 WHERE 1=1을 사용할 때에는, 적절한 인덱스를 사용하는 등의 최적화 작업을 수행하여 쿼리의 성능을 향상시켜야 한다. 하지만 WHERE 1=1이 직접적인 성능저하의 원인이 되는 경우는 많지 않기 때문에, 특별히 걱정하지 않아도 된다.      ","categories": ["coding-test"],
        "tags": ["SQL"],
        "url": "/coding-test/SQL-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4(2)/",
        "teaser": null
      },{
        "title": "Post: 알고리즘 문제풀이 - 가장 짧은 문자거리 찾기",
        "excerpt":"알고리즘 문제풀이 연습 - 1        어려웠던 부분   1. 구현 방법의 잘못된 접근      while문 속에서 lt, rt 값을 사용하여 왼쪽과 오른쪽을 한번에 탐색하려고 시도함.   문자열에서 비교 대상 문자가 속해있는 index값을 전부 저장해 두고, 문자열을 쪼개서 반복문을 돌며 index - 문자 값 중 가장 작은값을 return하려 시도.      문제를 단계별로 나누어 해결하기 보다, 한번에 해결하려고 하다 보니 위와 같은 어렵고 복잡한 구현 방법을 생각하게 되었음.       강의에서 제시한 방법으로 구현 할 시, 문자열의 length * 2 만큼만 반복하면 해결이 가능함. 하지만 위의 방법으로 구현 시, !string.length() 만큼 반복 횟수가 늘어남.    문제 해결 중 학습한 내용      문제 접근 방법   int[] answer = new int[str.length()];         int index = 1000;          for(int i = 0; i &lt; str.length(); i++) {             if(str.charAt(i) == c) {                 index = 0;                 answer[i] = index;             } else {                 index++;                 answer[i] = index;             }         }      문자열의 index를 왼쪽부터 조회하며, 해당 index의 왼편에서 비교대상 문자를 찾아 얼마나 떨어져 있는지 그 값을 저장한다. (오른쪽에 있을 경우는 생각하지 않는다.)    for(int j = str.length() - 1; j &gt;= 0; j--) {             if(str.charAt(j) == c) {                 index = 0;             } else {                 index++;                 answer[j] = Math.min(answer[j], index);             }         }      문자열의 index를 오른쪽부터 왼쪽으로 조회한다. 이 과정에서, 앞서 조회했던 값보다 위에서 조회한 절대값이 더 작을 경우(오른편에 있는 문자로부터의 절대값이 더 작을경우) 해당 index를 저장한다.   ","categories": ["coding-test"],
        "tags": ["Algorithm"],
        "url": "/coding-test/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4/",
        "teaser": null
      },{
        "title": "Post: 알고리즘 문제풀이 - 피보나치 수열",
        "excerpt":"알고리즘 문제풀이 연습 - 2        제출한 답안   public int[] solution(int count) {          int[] answer = new int[count];         answer[0] = 1;         answer[1] = 1;          for(int i = 2; i&lt;count; i++) {             answer[i] = answer[i-2] + answer[i-1];         }          return answer;     }   문제 해결 중 학습한 부분.   재귀함수           재귀란?              컴퓨터 과학에서, 자신을 정의할 때 자기 자신을 재참조 하는 방법.                 재귀함수란?             재귀의 설명 그대로, 함수에서 자기 자신을 다시 호출해 작업을 수행하는 방식. 주로 반복문을 구현할 때 사용한다.              재귀함수를 이용한 피보나치 수열 구현   public int solution(int count) {      if(count &lt;= 1) {         return 1;     }     return solution(i-2) + solution(i-1); }     재귀함수의 장단점   장점      가독성이 향상된다.   변수 사용을 줄여줌으로서, 변경 가능성(mutable state)을 최소화 시켜 프로그램의 안정성을 향상시킨다.   단점      매개변수, 지역변수, 리턴 값, 함수 종료 후 복귀지점이 스택 메모리에 저장되기 때문에, 메모리 사용량이 높다.   그렇기 때문에 일반적으로 반복문 보다 성능이 낮다.     재귀함수 단점 보완을 위한 방법   메모이제이션      재귀함수의 단점을 보완하기 위한 방법으로 값비싼 함수 호출의 결과를 캐싱하고, 동일한 입력이 발생할 때 함수를 호출하지 않고 캐싱된 결과를 반환하는 기술.      메모이제이션을 사용해 구현한 피보나치 수열   public static void int[] memo;  public int solution(int count) {     if(memo[count] &gt; 0) {         return memo[count];     }     if(count &lt;= 1) {         return 1;     }     return memo[i] = solution(count - 1) + solution(count - 2); }      기존의 로직이라면, 캐싱된 값이 없기 때문에 콜스택에 count만큼 지역변수, 매개변수, 반환주소 등이 쌓이고, count의 마지막 부분에 가서야 모든 작업이 수행됨.   메모이제이션을 사용할 경우, static 변수에 한번 연산된 값을 저장하게 됨. 이 경우, 한번 연산된 값은 이후 재귀함수를 통해 재연산이 불필요.      핵심 : 한번 연산된 값을 저장해서, 이후 동일 작업이 호출될 때 재연산을 하는게 아닌 저장된 값을 반환한다.   ","categories": ["coding-test"],
        "tags": ["Algorithm"],
        "url": "/coding-test/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4(2)/",
        "teaser": null
      },{
        "title": "Post: 알고리즘 문제풀이 - 소수의 판별",
        "excerpt":"알고리즘 문제풀이 연습 - 3        제출한 답안   public class Main{      public int solution(int count) {          int answer = 0;         int[] array = new int[count+1];         array[0] = 1;         array[1] = 1;          for(int i=2; i&lt;=count; i++) {             for(int j=2; j&lt;=i; j++) {                 if( // 소수 판별 ) {                     answer++;                     // 판별된 소수 배수 val 1 처리                 }             }             return answer;         }     }     //main method 생략 }   어려웠던 점      소수 판별 어떻게?            2 ~ count까지의 수를 반복문을 통해 소수 여부를 판별하려 했음. 하지만 위의 로직대로라면, 2와 3은 소수이지만 내부 반복문에서 2와 3으로 나눠지기 때문에 나머지가 0으로 되어 소수가 아닌것으로 처리되는 이슈. (사전처리 3까지 하고, i = 4로 설정?)           모범 답안   public class Main {    public int solution(int count) {      int answer = 0;     int[] array = new int[count+1];      for(int i=2; i&lt;=count; i++) {       if(array[i]==0){         answer++;         for(int j=i; j&lt;=count; j=j+i) {          array[j]=1;         }       }     }       return answer;   }      //main method 생략  }   주목할 포인트      2, 3의 처리방법            int형 배열 생성 시 기본값은 0. 2부터 반복문을 돌리고, 바로 value = 0 검사.       2, 3은 value 0이기 때문에 소수 처리 가능. 또한 배수 처리도 가능.       소수 판별 로직을 하나하나 작성하지 않아도, 2, 3의 사전 처리 때문에 자연스럽게 배수처리가 가능.           심화      위의 문제에서는 소수의 갯수만 출력하지만, 실제로 소수 그 자체를 출력하는 문제로 변형된다면?   function isPrime(int num) {   if(num == 1)     return false;   for(int i=2; i&lt;num; i++) {     if(num % i == 0) {       return false;     }   }   return true; }  if(isPrime(int num)) {   System.out.println(num); }      2 ~ n 까지의 숫자 중 어느것도 약수가 아닐때, (1과 자기 자신이 약수일 때) 해당 수는 소수가 된다.   ","categories": ["coding-test"],
        "tags": ["Algorithm"],
        "url": "/coding-test/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98_%EC%B2%B4/",
        "teaser": null
      },{
        "title": "Post: 알고리즘 문제풀이 - 소수 뒤집기",
        "excerpt":"알고리즘 문제풀이 연습 - 4        제출한 답안    public boolean isPrime(int num) {          if(num==1) return false;         for(int i=2; i&lt;num; i++) {              if(num % i == 0) {                  return false;              }         }         return true;     }      public List&lt;Integer&gt; solution(int count, int[] input) {          List&lt;Integer&gt; answer = new ArrayList&lt;&gt;();          for(int i=0; i&lt;count; i++) {             int tmp = input[i];             int res = 0;             while(tmp&gt;0) {                 int t = tmp%10;                 res = res * 10 + t;                 tmp = tmp/10;             }             if(isPrime(res)) {                 answer.add(res);             }         }         return answer;     }   어려웠던 점      숫자를 어떻게 뒤집을 것인가?            개인적으로는 입력받은 수를 StringBuilder의 reverse() 메소드로 뒤집을 생각이었음.       단순히 문자열을 뒤집는것 보다는, 위의 방법처럼 나머지와 몫을 이용해 수학적으로 접근하기.              t : %10 연산을 통해 가장 끝자리 수(나머지)를 추출하기 위한 변수.  res : 뒤집은 문자열을 저장하기 위한 변수. t의 값이 res * 10을 통해 자릿수를 형성함.   tmp : /10 연산을 통해 자릿수를 줄여나감. 반복문의 종료시점을 생성.   ","categories": ["coding-test"],
        "tags": ["Algorithm"],
        "url": "/coding-test/%EC%86%8C%EC%88%98-%EB%92%A4%EC%A7%91%EA%B8%B0/",
        "teaser": null
      }]
